# generate_locale.cmake - 语言文件嵌入生成器
#
# 此脚本用于将JSON语言文件转换为C++模块 设计目标：支持增量构建，避免不必要的重新生成
#
# 参数: INPUT_FILE     - 输入的JSON文件路径 OUTPUT_FILE    - 输出的.ixx文件路径 MODULE_NAME    -
# C++模块名称 VARIABLE_NAME  - 生成的变量名

# ============================================================================
# 参数验证
# ============================================================================

if(NOT DEFINED INPUT_FILE)
  message(FATAL_ERROR "INPUT_FILE parameter is required")
endif()

if(NOT DEFINED OUTPUT_FILE)
  message(FATAL_ERROR "OUTPUT_FILE parameter is required")
endif()

if(NOT DEFINED MODULE_NAME)
  message(FATAL_ERROR "MODULE_NAME parameter is required")
endif()

if(NOT DEFINED VARIABLE_NAME)
  message(FATAL_ERROR "VARIABLE_NAME parameter is required")
endif()

# 验证输入文件存在
if(NOT EXISTS "${INPUT_FILE}")
  message(FATAL_ERROR "Input file does not exist: ${INPUT_FILE}")
endif()

# ============================================================================
# 目录准备
# ============================================================================

# 确保输出目录存在
get_filename_component(output_dir "${OUTPUT_FILE}" DIRECTORY)
file(MAKE_DIRECTORY "${output_dir}")

# ============================================================================
# 读取和处理JSON内容
# ============================================================================

# 读取JSON文件内容
file(READ "${INPUT_FILE}" json_content)

# 验证文件不为空
string(LENGTH "${json_content}" content_length)
if(content_length EQUAL 0)
  message(FATAL_ERROR "Input file is empty: ${INPUT_FILE}")
endif()

# 获取输入文件的相对路径用于注释
file(RELATIVE_PATH input_relative_path "${CMAKE_SOURCE_DIR}" "${INPUT_FILE}")

# ============================================================================
# 生成C++模块代码
# ============================================================================

# 生成文件头注释和模块声明
set(cpp_content
    "// Auto-generated from ${input_relative_path}
// DO NOT EDIT - This file is automatically generated by the build system
// Generated at: ${CMAKE_CURRENT_LIST_FILE}
//
// Source file: ${INPUT_FILE}
// Module name: ${MODULE_NAME}
// Variable: ${VARIABLE_NAME}

module;

export module ${MODULE_NAME};

import std;

export namespace EmbeddedLocales {
    // Embedded JSON content as string_view
    // Size: ${content_length} bytes
    constexpr std::string_view ${VARIABLE_NAME} = R\"EmbeddedJson(${json_content})EmbeddedJson\";
}
")

# ============================================================================
# 写入输出文件
# ============================================================================

# 写入生成的C++代码
file(WRITE "${OUTPUT_FILE}" "${cpp_content}")

# 输出生成信息
get_filename_component(input_name "${INPUT_FILE}" NAME)
get_filename_component(output_name "${OUTPUT_FILE}" NAME)
message(
  STATUS
    "Generated embedded locale: ${input_name} -> ${output_name} (${content_length} bytes)"
)

# ============================================================================
# 验证生成的文件
# ============================================================================

# 验证输出文件确实存在
if(NOT EXISTS "${OUTPUT_FILE}")
  message(FATAL_ERROR "Failed to create output file: ${OUTPUT_FILE}")
endif()

# 验证输出文件不为空
file(SIZE "${OUTPUT_FILE}" output_size)
if(output_size EQUAL 0)
  message(FATAL_ERROR "Generated output file is empty: ${OUTPUT_FILE}")
endif()

# 生成完成
message(STATUS "Successfully generated ${MODULE_NAME} module")
