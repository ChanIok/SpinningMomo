name: Windows Build

on:
  push:
    tags:
      - 'v*'  # 只在推送版本标签时触发
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - master  # 在提交 PR 到 master 分支时触发
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:  # 添加手动触发支持

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-2022  # 使用 Windows Server 2022

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取所有历史记录和标签

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3
      with:
        vs-version: '[17.0,)'  # 使用 Visual Studio 2022 或更高版本
        msbuild-architecture: x64

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DCMAKE_GENERATOR_PLATFORM=x64 `
          -DCMAKE_SYSTEM_VERSION="10.0.22621.0"

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Create Release Package
      run: |
        # 创建发布目录
        mkdir ${{github.workspace}}/release
        
        # 复制主程序和文档
        copy ${{github.workspace}}/build/Release/SpinningMomo.exe ${{github.workspace}}/release/
        copy ${{github.workspace}}/docs/重要_使用前必看.html ${{github.workspace}}/release/
        copy ${{github.workspace}}/LICENSE ${{github.workspace}}/release/

    - name: Create ZIP archive
      run: |
        $VERSION = "${{github.ref_name}}"
        $ARTIFACT_NAME = "SpinningMomo-$VERSION.zip"
        # 使用 PowerShell 的 Join-Path，但输出转换为 posix 风格的路径
        $ARTIFACT_PATH = (Join-Path ${{github.workspace}} $ARTIFACT_NAME).Replace('\', '/')
        Compress-Archive -Path "${{github.workspace}}/release/*" -DestinationPath $ARTIFACT_PATH
        # 将路径保存为环境变量
        echo "ARTIFACT_PATH=$ARTIFACT_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        # 验证文件是否存在
        if (Test-Path $ARTIFACT_PATH) {
          echo "ZIP file created successfully at: $ARTIFACT_PATH"
        } else {
          echo "::error::Failed to create ZIP file at: $ARTIFACT_PATH"
          exit 1
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SpinningMomo-${{env.BUILD_TYPE}}
        path: ${{env.ARTIFACT_PATH}}
        retention-days: 5  # 构建产物保留 5 天

    - name: Generate Release Notes
      if: startsWith(github.ref, 'refs/tags/')
      id: release_notes
      run: |
        # 获取当前标签和上一个标签
        $CURRENT_TAG = "${{github.ref_name}}"
        $PREV_TAG = $(git describe --tags --abbrev=0 "$CURRENT_TAG^" 2>$null)
        
        if (-not $PREV_TAG) {
          # 如果没有上一个标签，获取所有提交
          $COMMITS = $(git log --pretty=format:"%s|%b" --no-merges)
        } else {
          # 获取从上一个标签到当前标签的所有提交
          $COMMITS = $(git log "$PREV_TAG..$CURRENT_TAG" --pretty=format:"%s|%b" --no-merges)
        }
        
        $FORMATTED_COMMITS = $COMMITS -split "`n" | ForEach-Object {
          $parts = $_ -split '\|'
          $title = $parts[0].Trim()
          $body = if ($parts.Length -gt 1) { $parts[1].Trim() } else { "" }
          
          $output = "- $title"
          if ($body) {
            $output += "`n  $($body -replace "`n", "`n  ")"
          }
          $output
        }
        
        $NOTES = @"
        ## 更新内容

        $($FORMATTED_COMMITS -join "`n")
        "@
        
        # 使用环境文件来存储多行内容
        $NOTES | Out-File -FilePath release_notes.txt -Encoding utf8
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_ENV
        Get-Content release_notes.txt | ForEach-Object { echo $_ >> $env:GITHUB_ENV }
        echo "EOF" >> $env:GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{env.ARTIFACT_PATH}}
        draft: false
        prerelease: false
        body: ${{ env.RELEASE_NOTES }}
        token: ${{ secrets.GITHUB_TOKEN }}

